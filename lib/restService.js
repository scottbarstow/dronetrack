// Generated by CoffeeScript 1.6.3
var RestService, superagent;

superagent = require("superagent");

superagent.Request.prototype.setAccessToken = function(accessToken) {
  return this.set("Authorization", "Bearer " + accessToken);
};

RestService = (function() {
  function RestService(path) {
    if (this.baseUrl.length > 0 && this.baseUrl[this.baseUrl.length - 1] === "/") {
      this.baseUrl = this.baseUrl.substr(0, this.baseUrl.length - 1);
    }
    this.url = "" + this.baseUrl + path;
    this.processResult = RestService.processResult;
  }

  RestService.prototype.createRequest = function(url, method) {
    if (method == null) {
      method = "get";
    }
    method = method.toLowerCase();
    return superagent[method](url).setAccessToken(this.accessToken).set("accept", "application/json");
  };

  RestService.prototype.all = function(query, callback) {
    if (arguments.length === 1) {
      callback = query;
      query = null;
    }
    return this.createRequest(this.url).query(query || {}).end(this.processResult.bind(this, callback));
  };

  RestService.prototype.get = function(id, callback) {
    return this.createRequest("" + this.url + "/" + id).end(this.processResult.bind(this, callback));
  };

  RestService.prototype.create = function(item, callback) {
    return this.createRequest(this.url, "post").send(item).end(this.processResult.bind(this, callback));
  };

  RestService.prototype.update = function(item, callback) {
    return this.createRequest("" + this.url + "/" + item.id, "put").send(item).end(this.processResult.bind(this, callback));
  };

  RestService.prototype.remove = function(id, callback) {
    return this.createRequest("" + this.url + "/" + id, "del").end(this.processResult.bind(this, callback));
  };

  RestService.prototype.destroy = function(id, callback) {
    return this.remove(id, callback);
  };

  return RestService;

})();

RestService.processResult = function(callback, err, res) {
  var r;
  if (err != null) {
    return callback(err);
  }
  if ((res.body != null) && Object.keys(res.body).length > 0) {
    r = res.body;
    if (res.statusCode >= 400) {
      if (r.error != null) {
        return callback(new Error(r.error));
      }
      callback(new Error("Http error " + res.statusCode));
    }
    return callback(null, r);
  } else {
    if (res.statusCode >= 400) {
      return callback(new Error(res.text));
    } else {
      return callback();
    }
  }
};

module.exports = RestService;
