// Generated by CoffeeScript 1.6.3
var Drone, config, createDrone, drone, path;

Drone = require("../..").Drone;

path = require("path");

config = require("../config");

drone = new Drone(config.baseUrl, config.accessToken);

createDrone = function() {
  before(function(done) {
    var _this = this;
    return drone.create({
      name: "new Drone"
    }, function(err, i) {
      if (err != null) {
        return done(err);
      }
      _this.droneId = i.id;
      return done();
    });
  });
  return after(function(done) {
    return drone.remove(this.droneId, done);
  });
};

describe("Drone", function() {
  describe("all()", function() {
    return it("should return all drone records of current user", function(done) {
      return drone.all(function(err, items) {
        if (err != null) {
          return done(err);
        }
        Array.isArray(items).should.be["true"];
        return done();
      });
    });
  });
  describe("create()", function() {
    return it("should create new drone", function(done) {
      return drone.all(function(err, items) {
        var count;
        if (err != null) {
          return done(err);
        }
        count = items.length;
        return drone.create({
          name: "new Drone"
        }, function(err, item) {
          if (err != null) {
            return done(err);
          }
          item.id.should.be.ok;
          item.name.should.equal("new Drone");
          return drone.all(function(err, items) {
            if (err != null) {
              return done(err);
            }
            items.length.should.equal(count + 1);
            return done();
          });
        });
      });
    });
  });
  describe("get()", function() {
    it("should return drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.get(i.id, function(err, item) {
          if (err != null) {
            return done(err);
          }
          item.id.should.equal(i.id);
          item.name.should.equal(i.name);
          return done();
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.get("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("update()", function() {
    it("should update drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.get(i.id, function(err, item) {
          var name;
          if (err != null) {
            return done(err);
          }
          name = "Name" + (Math.random());
          item.name.should.not.equal(name);
          item.name = name;
          return drone.update(item, function(err, it) {
            if (err != null) {
              return done(err);
            }
            it.name.should.equal(name);
            return drone.get(i.id, function(err, it) {
              if (err != null) {
                return done(err);
              }
              it.name.should.equal(name);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.get({
        id: "id",
        name: "Drone"
      }, function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("remove()", function() {
    it("should remove drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.all(function(err, items) {
          var count;
          if (err != null) {
            return done(err);
          }
          count = items.length;
          return drone.remove(i.id, function(err) {
            if (err != null) {
              return done(err);
            }
            return drone.all(function(err, items) {
              if (err != null) {
                return done(err);
              }
              items.length.should.equal(count - 1);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.remove("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("addPoints()", function() {
    createDrone();
    it("should create new track and add points to it if trackId is missing", function(done) {
      return drone.addPoints(this.droneId, [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        if (err != null) {
          return done(err);
        }
        res.trackId.should.be.ok;
        return done();
      });
    });
    it("should add points to exisiting track", function(done) {
      var _this = this;
      return drone.addPoints(this.droneId, [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        var trackId;
        if (err != null) {
          return done(err);
        }
        trackId = res.trackId;
        trackId.should.be.ok;
        return drone.addPoints(_this.droneId, trackId, [
          {
            latitude: 3,
            longitude: 3
          }, {
            latitude: 4,
            longitude: 4
          }
        ], function(err, res) {
          if (err != null) {
            return done(err);
          }
          res.trackId.should.equal(trackId);
          return done();
        });
      });
    });
    it("should fail for non-exising drone", function(done) {
      var _this = this;
      return drone.addPoints("id", [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        err.should.be.ok;
        return done();
      });
    });
    return it("should fail for non-exising track", function(done) {
      var _this = this;
      return drone.addPoints(this.droneId, "trackId", [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        err.should.be.ok;
        return done();
      });
    });
  });
  return describe("importPointsFromFiles()", function() {
    createDrone();
    it("should create new tracks and add points for each csv file", function(done) {
      var files;
      files = [path.join(__dirname, "test1.csv"), path.join(__dirname, "test2.csv")];
      return drone.importPointsFromFiles(this.droneId, files, "csv", function(err, res) {
        if (err != null) {
          return done(err);
        }
        return done();
      });
    });
    return it("should create new tracks and add points for each kml file", function(done) {
      var files;
      files = [path.join(__dirname, "test1.kml")];
      return drone.importPointsFromFiles(this.droneId, files, "kml", function(err, res) {
        if (err != null) {
          return done(err);
        }
        return done();
      });
    });
  });
});
