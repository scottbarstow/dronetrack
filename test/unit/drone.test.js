// Generated by CoffeeScript 1.6.3
var Drone, config, drone;

Drone = require("../..").Drone;

config = require("../config");

drone = new Drone(config.baseUrl, config.accessToken);

describe("Drone", function() {
  describe("all()", function() {
    return it("should return all drone records of current user", function(done) {
      return drone.all(function(err, items) {
        if (err != null) {
          return done(err);
        }
        Array.isArray(items).should.be["true"];
        return done();
      });
    });
  });
  describe("create()", function() {
    return it("should create new drone", function(done) {
      return drone.all(function(err, items) {
        var count;
        if (err != null) {
          return done(err);
        }
        count = items.length;
        return drone.create({
          name: "new Drone"
        }, function(err, item) {
          if (err != null) {
            return done(err);
          }
          item.id.should.be.ok;
          item.name.should.equal("new Drone");
          return drone.all(function(err, items) {
            if (err != null) {
              return done(err);
            }
            items.length.should.equal(count + 1);
            return done();
          });
        });
      });
    });
  });
  describe("get()", function() {
    it("should return drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.get(i.id, function(err, item) {
          if (err != null) {
            return done(err);
          }
          item.id.should.equal(i.id);
          item.name.should.equal(i.name);
          return done();
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.get("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("update()", function() {
    it("should update drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.get(i.id, function(err, item) {
          var name;
          if (err != null) {
            return done(err);
          }
          name = "Name" + (Math.random());
          item.name.should.not.equal(name);
          item.name = name;
          return drone.update(item, function(err, it) {
            if (err != null) {
              return done(err);
            }
            it.name.should.equal(name);
            return drone.get(i.id, function(err, it) {
              if (err != null) {
                return done(err);
              }
              it.name.should.equal(name);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.get({
        id: "id",
        name: "Drone"
      }, function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  return describe("remove()", function() {
    it("should remove drone with given id", function(done) {
      return drone.create({
        name: "new Drone"
      }, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return drone.all(function(err, items) {
          var count;
          if (err != null) {
            return done(err);
          }
          count = items.length;
          return drone.remove(i.id, function(err) {
            if (err != null) {
              return done(err);
            }
            return drone.all(function(err, items) {
              if (err != null) {
                return done(err);
              }
              items.length.should.equal(count - 1);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if drone is not exists", function(done) {
      return drone.remove("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
});
