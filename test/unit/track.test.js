// Generated by CoffeeScript 1.6.3
var Drone, Track, auth, config, createSimpleTrack, createTrack, lib, path;

lib = require("../..");

Track = lib.Track;

Drone = lib.Drone;

path = require("path");

config = require("../config");

auth = require("./auth");

createSimpleTrack = function(accessToken, done) {
  var drone, track,
    _this = this;
  drone = new Drone(config.baseUrl, accessToken);
  track = new Track(config.baseUrl, accessToken);
  return drone.create({
    name: "new Drone"
  }, function(err, d) {
    if (err != null) {
      return done(err);
    }
    return track.create({
      name: "new Track",
      deviceId: d.id
    }, function(err, i) {
      if (err != null) {
        return done(err);
      }
      return done(null, i);
    });
  });
};

createTrack = function() {
  before(function(done) {
    var _this = this;
    return createSimpleTrack(this.accessToken, function(err, t) {
      if (err != null) {
        return done(err);
      }
      _this.trackId = t.id;
      _this.droneId = t.deviceId;
      return done();
    });
  });
  return after(function(done) {
    var drone;
    drone = new Drone(config.baseUrl, this.accessToken);
    return drone.remove(this.droneId, done);
  });
};

describe("Track", function() {
  auth.authorize();
  before(function() {
    return this.track = new Track(config.baseUrl, this.accessToken);
  });
  describe("all()", function() {
    return it("should return all track records of current user", function(done) {
      var _this = this;
      return this.track.all(function(err, items) {
        if (err != null) {
          return done(err);
        }
        Array.isArray(items).should.be["true"];
        return done();
      });
    });
  });
  describe("create()", function() {
    return it("should create new track", function(done) {
      var _this = this;
      return this.track.all(function(err, items) {
        var count;
        if (err != null) {
          return done(err);
        }
        count = items.length;
        return createSimpleTrack(_this.accessToken, function(err, t) {
          if (err != null) {
            return done(err);
          }
          t.id.should.be.ok;
          t.name.should.equal("new Track");
          return _this.track.all(function(err, items) {
            if (err != null) {
              return done(err);
            }
            items.length.should.equal(count + 1);
            return done();
          });
        });
      });
    });
  });
  describe("get()", function() {
    it("should return track with given id", function(done) {
      var _this = this;
      return createSimpleTrack(this.accessToken, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return _this.track.get(i.id, function(err, item) {
          if (err != null) {
            return done(err);
          }
          item.id.should.equal(i.id);
          item.name.should.equal(i.name);
          return done();
        });
      });
    });
    return it("should fail if track is not exists", function(done) {
      var _this = this;
      return this.track.get("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("update()", function() {
    it("should update track with given id", function(done) {
      var _this = this;
      return createSimpleTrack(this.accessToken, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return _this.track.get(i.id, function(err, item) {
          var name;
          if (err != null) {
            return done(err);
          }
          name = "Name" + (Math.random());
          item.name.should.not.equal(name);
          item.name = name;
          return _this.track.update(item, function(err, it) {
            if (err != null) {
              return done(err);
            }
            it.name.should.equal(name);
            return _this.track.get(i.id, function(err, it) {
              if (err != null) {
                return done(err);
              }
              it.name.should.equal(name);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if track is not exists", function(done) {
      var _this = this;
      return this.track.update({
        id: "id",
        name: "Track"
      }, function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("remove()", function() {
    it("should remove track with given id", function(done) {
      var _this = this;
      return createSimpleTrack(this.accessToken, function(err, i) {
        if (err != null) {
          return done(err);
        }
        return _this.track.all(function(err, items) {
          var count;
          if (err != null) {
            return done(err);
          }
          count = items.length;
          return _this.track.remove(i.id, function(err) {
            if (err != null) {
              return done(err);
            }
            return _this.track.all(function(err, items) {
              if (err != null) {
                return done(err);
              }
              items.length.should.equal(count - 1);
              return done();
            });
          });
        });
      });
    });
    return it("should fail if track is not exists", function(done) {
      var _this = this;
      return this.track.remove("id", function(err, item) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("addPoints()", function() {
    createTrack();
    it("should add points", function(done) {
      var _this = this;
      return this.track.addPoints(this.trackId, [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        if (err != null) {
          return done(err);
        }
        Array.isArray(res).should.be["true"];
        (res.length >= 2).should.be["true"];
        return done();
      });
    });
    return it("should fail for non-exising track", function(done) {
      var _this = this;
      return this.track.addPoints("id", [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        err.should.be.ok;
        return done();
      });
    });
  });
  describe("importPointsFromFiles()", function() {
    createTrack();
    it("should create new tracks and add points for each csv file", function(done) {
      var files,
        _this = this;
      files = [path.join(__dirname, "test1.csv"), path.join(__dirname, "test2.csv")];
      return this.track.importPointsFromFiles(this.trackId, files, "csv", function(err, res) {
        if (err != null) {
          return done(err);
        }
        return done();
      });
    });
    return it("should create new tracks and add points for each kml file", function(done) {
      var files,
        _this = this;
      files = [path.join(__dirname, "test1.kml")];
      return this.track.importPointsFromFiles(this.trackId, files, "kml", function(err, res) {
        if (err != null) {
          return done(err);
        }
        return done();
      });
    });
  });
  return describe("getPoints()", function() {
    createTrack();
    return it("should return points of the track", function(done) {
      var _this = this;
      return this.track.addPoints(this.trackId, [
        {
          latitude: 1,
          longitude: 1
        }, {
          latitude: 2,
          longitude: 2
        }
      ], function(err, res) {
        if (err != null) {
          return done(err);
        }
        return _this.track.getPoints(_this.trackId, function(err, pts) {
          if (err != null) {
            return done(err);
          }
          Array.isArray(pts).should.be["true"];
          (pts.length >= 2).should.be["true"];
          return done();
        });
      });
    });
  });
});
