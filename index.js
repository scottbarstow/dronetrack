// Generated by CoffeeScript 1.6.3
var Drone, RestService, Track, processResult, superagent,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

superagent = require("superagent");

processResult = function(callback, err, res) {
  var r;
  if (err != null) {
    return callback(err);
  }
  r = JSON.parse(res.text || "{}");
  if (r.error != null) {
    return callback(new Error(r.error));
  }
  return callback(null, r);
};

superagent.Request.prototype.setAccessToken = function(accessToken) {
  return this.set("Authorization", "Bearer " + accessToken);
};

RestService = (function() {
  function RestService(path) {
    if (this.baseUrl.length > 0 && this.baseUrl[this.baseUrl.length - 1] === "/") {
      this.baseUrl = this.baseUrl.substr(0, this.baseUrl.length - 1);
    }
    this.url = "" + this.baseUrl + "/" + path;
  }

  RestService.prototype.createRequest = function(url, method) {
    if (method == null) {
      method = "get";
    }
    method = method.toLowerCase();
    return superagent[method](url).setAccessToken(this.accessToken).type("json");
  };

  RestService.prototype.all = function(query, callback) {
    if (query == null) {
      query = null;
    }
    return this.createRequest(this.url).query(query || {}).end(processResult.bind(this, callback));
  };

  RestService.prototype.get = function(id, callback) {
    return this.createRequest("" + this.url + "/" + id).end(processResult.bind(this, callback));
  };

  RestService.prototype.create = function(item, callback) {
    return this.createRequest(this.url, "post").send(item).end(processResult.bind(this, callback));
  };

  RestService.prototype.update = function(item, callback) {
    return this.createRequest("" + this.url + "/" + item.id, "put").send(item).end(processResult.bind(this, callback));
  };

  RestService.prototype.remove = function(id, callback) {
    return this.createRequest("" + this.url + "/" + item.id, "del").end(processResult.bind(this, callback));
  };

  return RestService;

})();

Drone = (function(_super) {
  __extends(Drone, _super);

  function Drone(baseUrl, accessToken) {
    this.baseUrl = baseUrl;
    this.accessToken = accessToken;
    Drone.__super__.constructor.call(this, "/drone");
  }

  Drone.prototype.addPoints = function(id, trackId, points, callback) {
    if (trackId == null) {
      trackId = null;
    }
    return this.createRequest("" + this.url + "/" + id + "/points", "post").send({
      trackId: trackId,
      points: points || []
    }).end(processResult.bind(this, callback));
  };

  Drone.prototype.importPointsFromFiles = function(id, files, format, callback) {
    var file, i, r, _i, _len;
    format = format.toUpperCase();
    if (format !== "CSV" && format !== "KML") {
      return callback(new Error("Format " + (format || '<null>') + " is not supported"));
    }
    r = this.createRequest("" + this.url + "/" + id + "/import" + format, "post");
    i = 1;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      r = r.attach("file" + i, file);
      i += 1;
    }
    return r.end(processResult.bind(this, callback));
  };

  return Drone;

})(RestService);

Track = (function(_super) {
  __extends(Track, _super);

  function Track(baseUrl, accessToken) {
    this.baseUrl = baseUrl;
    this.accessToken = accessToken;
    Track.__super__.constructor.call(this, "/track");
  }

  Track.prototype.getPoints = function(id, callback) {
    return this.createRequest("" + this.url + "/" + id + "/points").end(processResult.bind(this, callback));
  };

  Track.prototype.addPoints = function(id, points, callback) {
    return this.createRequest("" + this.url + "/" + id + "/points", "post").send(points).end(processResult.bind(this, callback));
  };

  Track.prototype.importPointsFromFiles = function(id, files, format, callback) {
    var file, i, r, _i, _len;
    format = format.toUpperCase();
    if (format !== "CSV" && format !== "KML") {
      return callback(new Error("Format " + (format || '<null>') + " is not supported"));
    }
    r = this.createRequest("" + this.url + "/" + id + "/points/import" + format, "post");
    i = 1;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      r = r.attach("file" + i, file);
      i += 1;
    }
    return r.end(processResult.bind(this, callback));
  };

  return Track;

})(RestService);

module.exports = {
  Drone: Drone,
  Track: Track
};
